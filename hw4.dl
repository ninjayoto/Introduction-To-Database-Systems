/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)

.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)

p1(x,d) :- p0(x,d).
p1(x,d) :- p1(p,_), parent_child(p,x), person(x,d).

.decl count_p1(x:number)
count_p1(c) :- c=count:p1(_,_).
.output count_p1(IO=stdout)

/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)
.decl women(x:PersonType, d:DescriptionType, m:number)
.decl temp_women(x:PersonType, d:DescriptionType, m:number)
.decl men(x:PersonType, d:DescriptionType, m:number)
.decl temp_men(x:PersonType, d:DescriptionType, m:number)

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)

women(x,d,n) :- female(x), person(x,d), n = count:{parent_child(x,_)}.
temp_women(x,d,n) :- women(x,d,n), women(_,_,c), n<c.
p2(x,d,n) :- women(x,d,n), !temp_women(x,d,n).
men(x,d,n) :- male(x), person(x,d), n = count:{parent_child(x,_)}.
temp_men(x,d,n) :- men(x,d,n), men(_,_,c), n<c.
p2(x,d,n) :- men(x,d,n), !temp_men(x,d,n).

.decl count_p2(x:number)
count_p2(c) :- c=count:p2(_,_,_).
.output count_p2(IO=stdout)

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)
.decl lineage(x:PersonType, m:number)

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)

lineage(x,m) :- person(x,_), parent_child(x,_), m=0.
lineage(x,n+1) :- person(x,_), parent_child(y,x), lineage(y,n).
p3(x,m1,m2) :- person_living(x), m1 = min m: {lineage(x,m)}, m2 = max m: {lineage(x,m)}.

.decl count_p3(x:number)
count_p3(c) :- c=count:p3(_,_,_).
.output count_p3(IO=stdout)

/************* problem 4 **************/
.decl p4(x:PersonType)
.decl MA(x:PersonType, y:PersonType)
.decl MCA_X(x:PersonType)

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)

MA(x,y) :- person_living(x),parent_child(y,x),female(y).
MA(x,y) :- parent_child(y,z), female(y), MA(x,z).
MCA_X(y) :- person_living(z), MA(_,y), !MA(z,y).
p4(x) :- MA(_,x), !MCA_X(x).

.decl count_p4(x:number)
count_p4(c) :- c=count:p4(_).
.output count_p4(IO=stdout)

/************* problem 5 **************/
.decl p5(x:PersonType)
.decl not_MCA(x:PersonType)

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)

not_MCA(x) :- p4(x), p4(y), y != x, a = max n:lineage(x,n), b = max n:lineage(y,n), a < b.
not_MCA(x) :- p4(x), p4(z), MA(z,x), x != z.
p5(x) :- p4(x), !not_MCA(x).

.decl count_p5(x:number)
count_p5(c) :- c=count:p5(_).
.output count_p5(IO=stdout)
